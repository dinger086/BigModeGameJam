[gd_scene load_steps=22 format=3 uid="uid://b84cec1fegcns"]

[ext_resource type="Script" path="res://scripts/Game.gd" id="1_na0b5"]
[ext_resource type="PackedScene" uid="uid://bfpti047n82k7" path="res://ModeGame/Player.tscn" id="2_u7rkp"]
[ext_resource type="Script" path="res://scripts/Player.gd" id="3_lcxil"]
[ext_resource type="Texture2D" uid="uid://c5yfr41fmtswf" path="res://ModeGame/Sprites/Collectible.png" id="4_uru0w"]
[ext_resource type="Script" path="res://scripts/DialogueBox.gd" id="5_5x1vj"]
[ext_resource type="AudioStream" uid="uid://ci6wdgyb5rloa" path="res://Sound/Exploration(V1).wav" id="5_vpa6d"]
[ext_resource type="Script" path="res://menus/Pause.gd" id="5_wfqgu"]
[ext_resource type="Texture2D" uid="uid://cag0by5rbd64w" path="res://ModeGame/Sprites/particle3.png" id="7_bpuc8"]
[ext_resource type="Texture2D" uid="uid://bcb8i1eb5ufso" path="res://ModeGame/Sprites/background4.png" id="8_exp0c"]
[ext_resource type="Texture2D" uid="uid://c6geqa4iy31br" path="res://ModeGame/Sprites/background1.png" id="9_yq6i7"]
[ext_resource type="Texture2D" uid="uid://dicwvny0o3ubg" path="res://ModeGame/Sprites/background2.png" id="10_lgyk7"]
[ext_resource type="Texture2D" uid="uid://3o1o5bcvc1cx" path="res://ModeGame/Sprites/background3.png" id="11_q1ie5"]

[sub_resource type="Curve" id="Curve_8dsty"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.25, 1), 0.0, 0.0, 0, 0, Vector2(0.755859, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 4

[sub_resource type="CurveTexture" id="CurveTexture_clb8e"]
curve = SubResource("Curve_8dsty")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_n5gdu"]
lifetime_randomness = 0.25
particle_flag_disable_z = true
emission_shape_offset = Vector3(368, 248, 2.08165e-12)
emission_shape = 1
emission_sphere_radius = 1000.0
direction = Vector3(1, 2.08165e-12, 2.08165e-12)
initial_velocity_min = 15.0
initial_velocity_max = 25.0
gravity = Vector3(2.08165e-12, 2.08165e-12, 2.08165e-12)
scale_min = 0.01
scale_max = 0.03
scale_curve = SubResource("CurveTexture_clb8e")
scale_over_velocity_max = 1.0
color = Color(1, 1, 1, 0.215686)

[sub_resource type="GDScript" id="GDScript_4div8"]
resource_name = "Minimap"
script/source = "# The minimap panel. It draws a 3x3 minimap with player's position in the center. Note that the position is drawn differently from the MetSys player position.
extends Panel

# The cell coords in the center.
var current_cell: Vector2i

func _ready() -> void:
	# Set minimum size to 3 times the cell size.
	custom_minimum_size = MetSys.CELL_SIZE * 3
	# Reset position after setting size.
	set_anchors_and_offsets_preset(Control.PRESET_TOP_RIGHT, Control.PRESET_MODE_MINSIZE, 16)
	# Same for the center rect, which indicates current position.
	$ColorRect.custom_minimum_size = MetSys.CELL_SIZE
	$ColorRect.set_anchors_and_offsets_preset(Control.PRESET_CENTER)
	
	# Connect signals.
	MetSys.map_updated.connect(queue_redraw)
	MetSys.cell_changed.connect(on_cell_changed)

func on_cell_changed(new_cell: Vector3i):
	# On cell changed update the position and redraw.
	current_cell = Vector2i(new_cell.x, new_cell.y)
	queue_redraw()

func _draw() -> void:
	# Draw the 3x3 cells, i.e. (-1, -1) to (1, 1).
	for x in range(-1, 2):
		for y in range(-1, 2):
			# Draw the cell.
			MetSys.draw_cell(self, Vector2i(x + 1, y + 1), Vector3i(current_cell.x + x, current_cell.y + y, MetSys.current_layer))
	
	# Draw shared borders, if used by the theme.
	if MetSys.settings.theme.use_shared_borders:
		MetSys.draw_shared_borders()
	# Draw custom elements.
	MetSys.draw_custom_elements(self, Rect2i(current_cell.x - 1, current_cell.y - 1, 3, 3))

func _input(event: InputEvent) -> void:
	# Toggle visibility when pressing M.
	if event is InputEventKey:
		if event.pressed:
			if event.keycode == KEY_M:
				visible = not visible
"

[sub_resource type="Animation" id="Animation_lgykt"]
resource_name = "Flash"
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5),
"transitions": PackedFloat32Array(0.5, 2),
"update": 0,
"values": [Color(1, 1, 1, 0.752941), Color(1, 1, 1, 0)]
}

[sub_resource type="Animation" id="Animation_0p0d4"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.752941)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_kkw8m"]
_data = {
"Flash": SubResource("Animation_lgykt"),
"RESET": SubResource("Animation_0p0d4")
}

[sub_resource type="GDScript" id="GDScript_u7odr"]
resource_name = "MapWindow"
script/source = "# The window that contains a bigger map overview than minimap. Toggled with M.
extends Panel

# The size of the window in cells.
var SIZE: Vector2i

# The position where the player started (for the vector feature).
var starting_coords: Vector2i
# The offset for drawing the cells. Allows map panning.
var offset: Vector2i
# The player location node from MetSys.add_player_location()
var player_location: Node2D
# The vector feature, toggled with D. It displays an arrow from player's starting point to the current position.
# It's purely to show custom drawing on the map.
var show_delta: bool

func _ready() -> void:
	# Cellular size is total size divided by cell size.
	SIZE = size / MetSys.CELL_SIZE
	# Connect some signals.
	MetSys.cell_changed.connect(queue_redraw.unbind(1))
	MetSys.cell_changed.connect(update_offset.unbind(1)) # When player moves to another cell, move the map.
	MetSys.map_updated.connect(queue_redraw)
	# Create player location. We need a reference to update its offset.
	player_location = MetSys.add_player_location(self)

func _draw() -> void:
	for x in SIZE.x:
		for y in SIZE.y:
			# Draw cells. Note how offset is used.
			MetSys.draw_cell(self, Vector2i(x, y), Vector3i(x - offset.x, y - offset.y, MetSys.current_layer))
	# Draw shared borders and custom elements.
	if MetSys.settings.theme.use_shared_borders:
		MetSys.draw_shared_borders()
	MetSys.draw_custom_elements(self, Rect2i(-offset.x, -offset.y, SIZE.x, SIZE.y))
	# Get the current player coordinates.
	var coords := MetSys.get_current_flat_coords()
	# If the delta vector (D) is enabled and player isn't on the starting position...
	if show_delta and coords != starting_coords:
		var start_pos := MetSys.get_cell_position(starting_coords + offset)
		var current_pos := MetSys.get_cell_position(coords + offset)
		# draw the vector...
		draw_line(start_pos, current_pos, Color.WHITE, 2)
		
		const arrow_size = 4
		# and arrow. This code shows how to draw custom stuff on the map outside the MetSys functions.
		draw_set_transform(current_pos, start_pos.angle_to_point(current_pos), Vector2.ONE)
		draw_primitive([Vector2(-arrow_size, -arrow_size), Vector2(arrow_size, 0), Vector2(-arrow_size, arrow_size)], [Color.WHITE], [])

func _input(event: InputEvent) -> void:
	if event is InputEventKey:
		if event.pressed:
			# Toggle visibility when pressing M.
			if event.keycode == KEY_M:
				visible = not visible
				if visible:
					update_offset()
			elif event.keycode == KEY_D:
				# D toggles position tracking (delta vector).
				show_delta = not show_delta
				queue_redraw()

func update_offset():
	# Update the map offset based on the current position.
	# Normally the offset is interactive and the player is able to move freely around the map.
	# But in this demo, the map can overlay the game and thus is updated in real time.
	offset = -MetSys.get_current_flat_coords() + SIZE / 2
	player_location.offset = Vector2(offset) * MetSys.CELL_SIZE

func reset_starting_coords():
	# Starting position for the delta vector.
	var coords := MetSys.get_current_flat_coords()
	starting_coords = Vector2i(coords.x, coords.y)
	queue_redraw()
"

[sub_resource type="GDScript" id="GDScript_66suq"]
resource_name = "PercentLabel"
script/source = "# Displays map completion percentage
extends Label

func _ready() -> void:
	# The percentage may change when map is updated.
	MetSys.map_updated.connect(update)

func _notification(what: int) -> void:
	# Update when the label is made visible. This happens when the map is toggled.
	if what == NOTIFICATION_VISIBILITY_CHANGED:
		update()

func update():
	# Only update when visible.
	if is_visible_in_tree():
		# Show the percentage.
		text = \"%03d%%\" % int(MetSys.get_explored_ratio() * 100)
"

[node name="Game" type="Node2D"]
process_mode = 1
script = ExtResource("1_na0b5")
starting_map = "Playground.tscn"

[node name="Player" parent="." instance=ExtResource("2_u7rkp")]
position = Vector2(368, 248)
script = ExtResource("3_lcxil")
speed = 400.0
jump_velocity = -750.0
knockback_speed = 650.0
wall_gravity_scale = 0.5
coyote_time = 100.0

[node name="Camera2D" type="Camera2D" parent="Player"]

[node name="GPUParticles2D" type="GPUParticles2D" parent="Player"]
z_index = -1
position = Vector2(-368, -248)
amount = 400
process_material = SubResource("ParticleProcessMaterial_n5gdu")
texture = ExtResource("7_bpuc8")
lifetime = 5.0
randomness = 1.0
trail_lifetime = 0.01

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="Player"]
position = Vector2(-368, -248)
stream = ExtResource("5_vpa6d")
volume_db = -40.0

[node name="UI" type="CanvasLayer" parent="."]

[node name="Minimap" type="Panel" parent="UI"]
clip_contents = true
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -112.0
offset_top = 16.0
offset_right = -16.0
offset_bottom = 112.0
grow_horizontal = 0
script = SubResource("GDScript_4div8")

[node name="ColorRect" type="ColorRect" parent="UI/Minimap"]
modulate = Color(1, 1, 1, 0.752941)
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -16.0
offset_top = -16.0
offset_right = 16.0
offset_bottom = 16.0
grow_horizontal = 2
grow_vertical = 2

[node name="AnimationPlayer" type="AnimationPlayer" parent="UI/Minimap/ColorRect"]
libraries = {
"": SubResource("AnimationLibrary_kkw8m")
}
autoplay = "Flash"

[node name="MapWindow" type="Panel" parent="UI"]
visible = false
clip_contents = true
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -240.0
offset_top = -160.0
offset_right = 240.0
offset_bottom = 160.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_u7odr")

[node name="Percent" type="Label" parent="UI/MapWindow"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 23.0
text = "0%"
script = SubResource("GDScript_66suq")

[node name="Label" type="Label" parent="UI/MapWindow"]
layout_mode = 1
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_top = -23.0
offset_right = 40.0
grow_vertical = 0
text = "Press D to toggle delta vector"

[node name="HBoxContainer" type="HBoxContainer" parent="UI"]
visible = false
offset_left = 8.0
offset_top = 8.0
offset_right = 48.0
offset_bottom = 34.0

[node name="TextureRect" type="TextureRect" parent="UI/HBoxContainer"]
layout_mode = 2
texture = ExtResource("4_uru0w")
expand_mode = 2
stretch_mode = 5

[node name="CollectibleCount" type="Label" parent="UI/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "0"
vertical_alignment = 1

[node name="HealthBar" type="ProgressBar" parent="UI"]
offset_left = 26.0
offset_top = 33.0
offset_right = 263.0
offset_bottom = 60.0
rounded = true
show_percentage = false

[node name="DialogueBox" type="Panel" parent="UI"]
visible = false
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -356.0
offset_top = -90.0
offset_right = 366.0
offset_bottom = 1.0
grow_horizontal = 2
grow_vertical = 0
script = ExtResource("5_5x1vj")

[node name="TextBox" type="RichTextLabel" parent="UI/DialogueBox"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Pause" type="Panel" parent="UI"]
process_mode = 3
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("5_wfqgu")

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
offset = Vector2(368, 248)
scale = Vector2(3, 3)
transform = Transform2D(3, 0, 0, 3, 368, 248)

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2(2.08165e-12, 2.08165e-12)
motion_mirroring = Vector2(320, 2.08165e-12)

[node name="Sprite2D" type="Sprite2D" parent="ParallaxBackground/ParallaxLayer"]
texture = ExtResource("8_exp0c")

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2(0.1, 0.1)
motion_mirroring = Vector2(320, 2.08165e-12)

[node name="Sprite2D" type="Sprite2D" parent="ParallaxBackground/ParallaxLayer2"]
texture = ExtResource("9_yq6i7")

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2(0.2, 0.2)
motion_mirroring = Vector2(320, 2.08165e-12)

[node name="Sprite2D" type="Sprite2D" parent="ParallaxBackground/ParallaxLayer3"]
texture = ExtResource("10_lgyk7")

[node name="ParallaxLayer4" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2(0.3, 0.3)
motion_mirroring = Vector2(320, 2.08165e-12)

[node name="Sprite2D" type="Sprite2D" parent="ParallaxBackground/ParallaxLayer4"]
texture = ExtResource("11_q1ie5")
